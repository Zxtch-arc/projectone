{"version":3,"sources":["Components/Team/team.js","Components/Match/Match.js","Components/Scoreboard/scoreBoardItem.js","Components/Scoreboard/scoreBoard.js","Components/Banner/Banner.js","App.js","serviceWorker.js","index.js"],"names":["Team","wins","teamLosses","logo","teamName","Fragment","className","src","alt","Match","matchTitle","homeTeamLogo","opposingTeamLogo","homeTeamScore","opposingTeamScore","useState","displayScore","setDisplayScore","onClick","OWL","OverwatchLeague","ScoreBoardItem","teamId","teamLogo","setMatchWins","loss","setLoss","opponentId","setOpponentId","opponentLogo","setOpponentLogo","opponentScore","setOpponentScore","homeScore","setHomeScore","useEffect","getMatchWins","then","response","data","getMatchLoss","lastMatchForTeam","team","competitors","id","scores","value","getTeamLogo","catch","error","console","log","controls","width","crossOrigin","ScoreBoard","teams","setTeams","getTeams","map","index","competitor","name","primaryColor","key","style","background","renderScoreBoardItem","Banner","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.85243ddf.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./team.css\";\r\n\r\n const Team = ({wins, teamLosses, logo, teamName}) => {\r\n  return (\r\n      <React.Fragment>\r\n   \r\n        <div className=\"teamContainer\">\r\n          <div className=\"teamName\">\r\n          {teamName}\r\n          </div>\r\n          <div className=\"teamLogo\">\r\n            <img src={logo} alt='team logo'></img>\r\n          </div>\r\n          <div>\r\n            <span className=\"teamWinLoss\">W-L</span>\r\n            <div className=\"teamStats\">\r\n              <span className=\"teamWins\">{wins}</span>\r\n                -\r\n              <span className=\"teamLosses\">{teamLosses}</span>\r\n            </div>\r\n          </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Team;\r\n","import React, {useState} from 'react';\r\nimport './Match.css'\r\n\r\n const Match = ({matchTitle, homeTeamLogo, opposingTeamLogo, homeTeamScore, opposingTeamScore}) => {\r\n\r\n    const [displayScore, setDisplayScore] = useState(false);\r\n\r\n    const handleClick = () => setDisplayScore(!displayScore);\r\n    return (\r\n        <div className='currentMatchContainer'>\r\n            <span className='currentMatchTitle'>{matchTitle}</span>\r\n            <div className='currentVs'>\r\n                <div className='homeTeam'>\r\n                    <img src={homeTeamLogo} alt='logo'/> \r\n                </div>\r\n                <div className='currentScoresContainer'>\r\n                    { displayScore && (\r\n                        <div className='currentScores'>\r\n                            <span className='homeTeamscore'>{homeTeamScore}</span>\r\n                            -\r\n                            <span className='opposingTeamscore'>{opposingTeamScore}</span>    \r\n                        </div>\r\n                    )\r\n                    }\r\n                <button className='toggleButton' onClick={handleClick}>{displayScore ? 'Hide' : 'Show'}</button>\r\n                </div>\r\n                <div className='opposingTeam'>\r\n                    <img src={opposingTeamLogo} alt='logo'/> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Match;\r\n","import React, {useState, useEffect} from \"react\";\r\nimport OverwatchLeague from \"overwatchleague\";\r\nimport Team from '../Team/team';\r\nimport Match from '../Match/Match.js'\r\n\r\nconst OWL = new OverwatchLeague();\r\n\r\nconst ScoreBoardItem = ({teamId, teamName, teamLogo}) => {\r\n const [wins, setMatchWins] = useState(0);\r\n const [loss, setLoss] = useState(0);\r\n const [opponentId, setOpponentId] = useState('');\r\n const [opponentLogo, setOpponentLogo] = useState('');\r\n const [opponentScore, setOpponentScore] = useState(0);\r\n const [homeScore, setHomeScore] = useState(0);\r\n\r\n const fetchData = () => {\r\n    OWL.getMatchWins(teamId).then(response => {\r\n     setMatchWins(response.data)\r\n   }).then(OWL.getMatchLoss(teamId).then(response => { \r\n     setLoss(response.data)\r\n   })).then(OWL.lastMatchForTeam(teamId).then(response => {\r\n     const team = response.data;\r\n     setOpponentId(team.competitors[0].id)\r\n     setOpponentScore(team.scores[0].value)\r\n     setHomeScore(team.scores[1].value)\r\n  })).then(OWL.getTeamLogo(opponentId)\r\n  .then(response => {\r\n    setOpponentLogo(response.data)\r\n  }).catch(error => console.log(error))\r\n)}\r\n\r\n useEffect(() => {\r\n   fetchData(teamId);\r\n })\r\n\r\n return(\r\n  <div className=\"scoreBoardItem\">\r\n    <Team\r\n      teamName={teamName}\r\n      logo={teamLogo}\r\n      wins={wins}\r\n      teamLosses={loss}\r\n    />\r\n    <Match \r\n      matchTitle={'Recent'}\r\n      homeTeamLogo={teamLogo} \r\n      opposingTeamLogo={opponentLogo}\r\n      homeTeamScore={homeScore}\r\n      opposingTeamScore={opponentScore}\r\n    />\r\n\r\n    <video className=\"videoPlayer\" src=\"\" controls width=\"250\" crossOrigin=\"\" >\r\n    </video>\r\n  </div>\r\n)};\r\n\r\nexport default ScoreBoardItem;","\r\nimport React, {useState, useEffect} from \"react\";\r\nimport OverwatchLeague from \"overwatchleague\";\r\nimport ScoreBoardItem from \"./scoreBoardItem\";\r\nimport \"./scoreBoard.css\";\r\n\r\nconst OWL = new OverwatchLeague();\r\n\r\nconst renderScoreBoardItem = (index, id, name, logo, primaryColor) => {\r\n  const primaryBackgroundColor = {\r\n    background: \"black\"\r\n  }\r\n\r\n  return(<ScoreBoardItem teamId={id} teamName={name} teamLogo={logo} key={index} style={primaryBackgroundColor} />);\r\n} \r\n\r\nconst ScoreBoard = () => {\r\n\r\n  const [teams, setTeams] = useState([]);\r\n  \r\n\r\n  const fetchData = () =>  {\r\n     OWL.getTeams().then(response => {\r\n      const data = response.data\r\n      console.log(data.competitors)\r\n\r\n      setTeams(data.competitors)\r\n    }).catch(error => console.log(error))\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  },[]);\r\n  \r\n  return (\r\n    <div className=\"scoreBoard\">\r\n      {teams &&\r\n          teams.map(\r\n            (team, index) => {\r\n\r\n              const { id, name, logo, primaryColor } = team.competitor; \r\n\r\n              console.log(id)\r\n              \r\n              return renderScoreBoardItem(index, id, name, logo, primaryColor);\r\n            },\r\n          )}\r\n\r\n\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScoreBoard;\r\n\r\n\r\n  \r\n\r\n\r\n\r\n","import React from 'react'\r\nimport'./Banner.css'\r\n\r\nconst Banner = () => {\r\n  return (\r\n      <div className='Banner'>\r\n        <div className='bannerLogo'>\r\n          <img src='https://img2.goodfon.com/wallpaper/nbig/c/d0/volk-wolf-morda-krasnyy.jpg' alt='awesome banner'/>\r\n        </div>\r\n        <span>Alpha ESports</span>\r\n      </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default Banner\r\n","import React from 'react';\r\nimport ScoreBoard from './Components/Scoreboard/scoreBoard'\r\nimport Banner from './Components/Banner/Banner'\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Banner />\r\n      <ScoreBoard /> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}